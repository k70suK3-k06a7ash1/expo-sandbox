name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install coverage dependencies
        run: npm install --save-dev @vitest/coverage-v8

      - name: Run tests with coverage
        run: npm run test:run -- --coverage --reporter=verbose --reporter=json --outputFile=test-results.json

      - name: Generate coverage badge
        uses: badge-generator/javascript-coverage-badge@main
        with:
          coverage-file: ./coverage/coverage-summary.json
          badge-path: ./coverage-badge.svg

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.json
            coverage/
          retention-days: 30

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 21.x]
        exclude:
          # Exclude some combinations to reduce CI load
          - os: windows-latest
            node-version: 21.x
          - os: macos-latest
            node-version: 18.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npm run test:run

      - name: Test results summary
        if: always()
        run: |
          echo "::notice::Tests completed on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run performance benchmarks
        run: |
          echo "ðŸš€ Running performance tests..."
          # Run tests multiple times to check for consistency
          for i in {1..3}; do
            echo "Run $i:"
            time npm run test:run
          done

      - name: Bundle size analysis
        run: |
          echo "ðŸ“¦ Analyzing bundle size..."
          npm install -g @expo/cli
          expo export -p web --output-dir dist-analysis
          du -sh dist-analysis/
          echo "Bundle analysis complete"

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linter with detailed output
        run: npm run lint -- --format=json --output-file=lint-results.json

      - name: Type checking
        run: npx tsc --noEmit --pretty

      - name: Check code formatting
        run: |
          echo "ðŸŽ¨ Code formatting check..."
          # Add prettier check if available
          if [ -f "package.json" ] && grep -q "prettier" package.json; then
            npx prettier --check .
          else
            echo "Prettier not configured, skipping format check"
          fi

      - name: Dependency analysis
        run: |
          echo "ðŸ“Š Dependency analysis..."
          npm ls --depth=0
          echo "Checking for security vulnerabilities..."
          npm audit --level=high || true

      - name: Upload quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            lint-results.json
          retention-days: 7