name: Status Check

on:
  workflow_run:
    workflows: ["CI", "Test Coverage"]
    types:
      - completed

jobs:
  status-check:
    name: Overall Status Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check CI Workflow Status
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          echo "‚úÖ CI Pipeline Status: SUCCESS"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"

      - name: Check CI Workflow Failure
        if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        run: |
          echo "‚ùå CI Pipeline Status: FAILURE"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
          echo "Please check the workflow logs for details."
          exit 1

      - name: Handle Other Status
        if: ${{ github.event.workflow_run.conclusion != 'success' && github.event.workflow_run.conclusion != 'failure' }}
        run: |
          echo "‚ö†Ô∏è CI Pipeline Status: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"

      - name: Update Status
        run: |
          echo "üîÑ Updating project status..."
          echo "Last CI Run: $(date)"
          echo "Status: ${{ github.event.workflow_run.conclusion }}"
          
  validate-setup:
    name: Validate CI Setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Workflow Files
        run: |
          echo "üîç Validating CI configuration..."
          
          # Check required files exist
          echo "Checking required files..."
          test -f .github/workflows/tinybase-mockup-ci.yml && echo "‚úÖ tinybase-mockup-ci.yml exists"
          test -f .github/workflows/tinybase-mockup-test-coverage.yml && echo "‚úÖ tinybase-mockup-test-coverage.yml exists"
          test -f tinybase-mockup/vitest.config.ts && echo "‚úÖ vitest.config.ts exists"
          test -f tinybase-mockup/package.json && echo "‚úÖ package.json exists"
          
          # Validate package.json test scripts
          echo "Checking test scripts..."
          grep -q "test.*vitest" tinybase-mockup/package.json && echo "‚úÖ Test script configured"
          grep -q "test:run.*vitest run" tinybase-mockup/package.json && echo "‚úÖ Test run script configured"
          grep -q "test:coverage.*coverage" tinybase-mockup/package.json && echo "‚úÖ Coverage script configured"
          
          echo "‚úÖ CI setup validation complete"

      - name: Test Configuration
        run: |
          echo "üß™ Testing configuration..."
          
          # Check if test files exist in tinybase-mockup directory
          find tinybase-mockup -name "*.test.ts" -o -name "*.test.js" | head -5 | while read file; do
            echo "‚úÖ Found test file: $file"
          done
          
          # Count test files
          TEST_COUNT=$(find tinybase-mockup -name "*.test.ts" -o -name "*.test.js" | wc -l)
          echo "üìä Total test files: $TEST_COUNT"
          
          if [ $TEST_COUNT -gt 0 ]; then
            echo "‚úÖ Test files present"
          else
            echo "‚ö†Ô∏è  No test files found"
          fi